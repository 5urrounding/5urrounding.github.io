<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/03/13/lab1---Datalab/"/>
      <url>/2022/03/13/lab1---Datalab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><strong>一、前言</strong><br><strong>二、配置lab环境</strong><br> <strong>三、开摆~</strong><br><strong>1.bitXor</strong><br><strong>2.tmin</strong><br> <strong>3.isTmax</strong><br><strong>4. allOddBits</strong><br><strong>5.negate</strong><br><strong>6.isAsciiDigit</strong><br><strong>7.conditional</strong><br><strong>8.isLessOrEqual<br>9.logicalNeg<br>10.howManyBits</strong></p><p><strong>Float​</strong><br><strong>1.floatScale2</strong><br><strong>2.floatFloat2Int</strong><br><strong>3.floatPower2</strong></p><p><strong>一、前言</strong></p><p>  其实学长在布置作业的时候是有发了一个英文的文件，里面的README是有lab这个东西的简介的。但是里面打开就是全英，真的是懒了。所以完全没看就自己去csdn一顿乱搜。水了一下午的课可算是搞懂了来龙去脉，但当我会看readme时才发现自己确实浪费了许多没必要的时间，唉，下次一定~~watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUlNBLg==,size_20,color_FFFFFF,t_70,g_se,x_16</p><p>总的来说csapp是一本关于计算机的大杂烩，什么都讲，包括os 、计算机网络network 、计算机组成、汇编等，而lab则是这本书上配套的练习题，完成起来也是有一定的难度的，实验文档都是英文的，并且实验是建立咋了linux平台上的。watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUlNBLg==,size_20,color_FFFFFF,t_70,g_se,x_16</p><p>上图找的有道，可以明白了lab就是有许多题，我们要按照它的要求去具体实现。 先来进行lab1-datalab</p><p>一下午的时间还是有收获的，下面我们就一步一步的开始吧！<br>二、配置lab环境</p><p>也看了很多关于配置环境文章，有简单需要安装docker，但对于我们小白，还是找个简单的吧</p><p><a href="https://blog.csdn.net/qq_45703010/article/details/120897185">————&gt;环境搭建</a></p><p>这个是我找到的最简单的一个搭建环境的方法，这里附上一张我自己配好环境的图<img src="https://img-blog.csdnimg.cn/fa90b2bb0cbe408bb1b92a6504e741e4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUlNBLg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p> 可以看到当我们输入./btest -g 之后已经列出来我现在的lab1的答题情况，包括Score这道题的得分</p><p>Rating这道题的难度也是这道题的满分，Errors出现的错误。</p><pre><code>注意事项​ 接下来就是最重要的注意事项，其中分为int题和float题，注意事项不同，主要根据题目上方的提示进行做题。int题允许：    整数常量0到255 (0xFF)。不允许使用像0xffffffff这样的大常量。    函数参数和局部变量(没有全局变量)。    一元整型运算!~。    二进制整数运算&amp; ^ | + &lt;&lt; &gt;&gt;。不允许：    使用任何控件结构，如if、do、while、for、switch等。    定义或使用任何宏。    在此文件中定义任何附加函数。    调用任何函数。    使用任何其他操作，如&amp;&amp;，||，-，或?    使用任何形式的铸造。    使用除int以外的任何数据类型。这意味着不能使用数组、结构或联合。float题​ 对于需要实现浮点运算的问题，编码规则不那么严格。你可以使用循环和条件控制。你可以同时使用整数和无符号。​ 可以使用任意整数和无符号常量。可以对int或unsigned数据使用任何算术、逻辑或比较操作。但被明确禁止:    义或使用任何宏。    在此文件中定义任何附加函数。    调用任何函数。    使用任何形式的铸造。    使用除int或unsigned以外的任何数据类型。这意味着不能使用数组、结构或联合。    使用任何浮点数据类型、操作或常量。 </code></pre><p> 三、开摆~</p><p>首先我们打开这个文件</p><p><img src="https://img-blog.csdnimg.cn/ee3e4e5e71414e57928bdcb0e5f82bcd.png#pic_center" alt="ee3e4e5e71414e57928bdcb0e5f82bcd.png"></p><p> 直接记事本形式打开就可以了，我们直接在里面修改，做题。之后在这个文件夹里打开终端，然后btest检查错误，订正。整体就是这样。我们先来看第一题：</p><p><strong>1.bitXor</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1* bitXor - x^y using only ~ and &amp;</span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br></pre></td></tr></table></figure><p> 题意就是只使用~和&amp;来实现x^y的效果。这里需要知道一个知识点异或等于取反的组合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = ~(x&amp;~y);</span><br><span class="line">  <span class="keyword">int</span> b = ~(~x&amp;y);</span><br><span class="line">  <span class="keyword">return</span> ~(a&amp;b);</span><br></pre></td></tr></table></figure><p>用到数学里的公式（参考资料）</p><p><strong>2.tmin</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> * tmin - <span class="keyword">return</span> minimum two<span class="number">&#x27;</span>s complement integer </span><br><span class="line"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line"> *   Max ops: <span class="number">4</span></span><br><span class="line"> *   Rating: <span class="number">1</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">tmin</span>(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a &lt;&lt; <span class="number">31</span>;</span><br></pre></td></tr></table></figure><p>这里不知道怎么我的代码里已经写好了（学长忘删了）假装没看到。题意是要求返回一个二进制里的最小值。整个程序运行在32位系统上，所以我们要找32位里二进制的最小值。首先我们需要明确32位里有负数，但计算机里的正负是人为来界定的，我们来看下面这张图：</p><p><img src="https://img-blog.csdnimg.cn/91dc1d9902234ca1ab1d41ff22f8c0cd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUlNBLg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUlNBLg==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p> 0111代表的是7，但是1000就代表了-8，这是四位的图像，32位图像也是一样的。最小值也是10000000000000000000000000000000（一共是32位）</p><p>但是注意事项里有提到，我么使用的整数常量只能是0到255 (0xFF)，所以我们需要通过位操作来实现得到0x8000 0000。我们将1进行左移位，左移31位后就可以得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a &lt;&lt; <span class="number">31</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>3.isTmax</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res2 = x &amp; res;</span><br><span class="line">    <span class="keyword">return</span> !res2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断给定值x是否为最大值</p><p>当x为最大值时，返回值为1，即在最后判断时需要逻辑判断！res（res为我们最后转化成的值）即res要为0，所以我们要把x转化成0。</p><p>假设此时x为最大值，则x=0x7FFF FFFF ;  x+1=0x8000 0000 ;令a=x+1 则x+a=0xFFFF FFFF。二进制表示为全1.取反后为0</p><p>代码表示为：a=x+1 ； res=a+x  ； res=~res  ； ！res</p><p>测试一下发现不对，忽略了特殊情况x=0xFFFF FFFF ;a=x+1=0x0000 0000 ; x+a=0xFFFF FFFF取反之后得到0x00000000 所以要排除x=0xFFFF FFFF 参考网上:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=x+<span class="number">1</span>;</span><br><span class="line">        x=a+x;</span><br><span class="line">        x=~x;</span><br><span class="line">        a=!a;</span><br><span class="line">        res=x+a;</span><br><span class="line">    <span class="keyword">return</span> !res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. allOddBits</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这一题要求如果x的奇数位都为1，则返回1：否则返回0</p><p>只说了奇数位为1没有说偶数位，所以我们将x先和0xaaaa aaaa（奇数位全是1）进行与运算，运算之后如果偶数位位0则还为0，若偶数位为1则变为0，即偶数位全为0。但是如果奇数位为0则变为0，为1则还是1。最后将结果再与0xaaaa aaaa进行异或运算。如果结果为0则符合，否则不符合</p><p>代码实现如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这里我们不能直接用0xaaaa aaaa，所以先移位把它搞出来</span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0xaa</span>;</span><br><span class="line">  <span class="keyword">int</span> a_8 = a&lt;&lt;<span class="number">8</span>;<span class="comment">//0x0000aa00</span></span><br><span class="line">  <span class="keyword">int</span>  low_16  = a|a_8;<span class="comment">//0x0000aaaa;</span></span><br><span class="line">  <span class="keyword">int</span> high_16 = low_16&lt;&lt;<span class="number">16</span>;<span class="comment">//0xaaaa0000</span></span><br><span class="line">  <span class="keyword">int</span> num = low_16 | high_16;<span class="comment">//0xaaaaaaaa</span></span><br><span class="line">  <span class="keyword">int</span> check = (x&amp;num)^num;</span><br><span class="line">  <span class="comment">//如果check是0 则满足要求 返回1</span></span><br><span class="line">  <span class="keyword">return</span> !check;</span><br></pre></td></tr></table></figure><p><strong>5.negate</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> * negate - <span class="keyword">return</span> -x </span><br><span class="line"> *   Example: <span class="built_in">negate</span>(<span class="number">1</span>) = <span class="number">-1.</span></span><br><span class="line"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line"> *   Max ops: <span class="number">5</span></span><br><span class="line"> *   Rating: <span class="number">2</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">negate</span>(<span class="keyword">int</span> x) &#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题要求返回一个数的负值，这里我们要知道不管是正数还是负数，我们对其取反再加1都等于它的相反数。所以答案就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.isAsciiDigit</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯！意思就是如果x在大于等于0x30且小于等于0x39就返回1；否则，返回0。这里需要判断啊。首先我们需要明确什么是逻辑取反”！“，什么是按位取反”~“。</p><table><thead><tr><th>逻辑取反”！“</th><th>它是不看你具体是什么数字的，只要数字是非零数字都会返回0，并判断为假。如果是0，会返回1，并判断为真。</th></tr></thead><tbody><tr><td><strong>按位取反”~“</strong></td><td><strong>这个就是位运算里的取反，如4，二进制表示为0100，取反后为1011也就是11，每个位的1变为0，0变为1.</strong></td></tr></tbody></table><p>清楚这个之后，以我现在的理解，！常用于最后return，也就是返回时进行判断。</p><p>回到这个题x需满足条件：0x30=&lt;x=&lt;0x39,我们将它拆分开，0x30=&lt;x且x=&lt;0x39。即</p><blockquote><p>x-0x30&gt;=0——&gt;(x+~0x30)=a</p><p>0x39-x&gt;=0——&gt;(0x39+~x)=b</p></blockquote><p>此时我们只需要判断符号位了，当a，b均大于等于0时，a和b的符号位肯定为0。所以我们分别将a，b右移31位，当a，b均为0时，判断为真。则答案为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;undefined</span><br><span class="line"><span class="keyword">return</span> !((x + ~<span class="number">0x30</span>)&gt;&gt;<span class="number">31</span>) | ((<span class="number">0x39</span> + ~x)&gt;&gt;<span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.conditional</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">conditional</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>题目要求设计函数来实现x？y：z。首先我们需要知道什么是x?y:z.查找了资料了解了。这是一个三目运算符，这个符号实现下面一个选择分支结构：</p><blockquote><p>if（x）</p><p>min=y；</p><p>else</p><p>min=z；</p></blockquote><p>所以说它是一个条件表达式，当x判断为真时，表达式取值为y，假时取值为z</p><p>首先思路就是最后要进行一个或运算，x要返回一个值，当x为真时我们可以得到y的值此时z值要为0;当x为假时，y会变为0，而得到z的值。最后变为0的操作我们需要用到&amp;，和0x0000 0000进行与运算，则任何数都会返回为0。就是说到最后时x变为0xFFFF FFFFF，0x0000 0000分别和y，z进行&amp;运算。看题目给的Example，当x为2时，返回4也就是y。所以当x为非0数时返回y，则当x为0时返回z。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;undefined</span><br><span class="line">x = ~(!!x) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//通过此运算当x为非0数时，x值会变为0xFFFF FFFF</span></span><br><span class="line"><span class="comment">//而x为0时，还会变成0</span></span><br><span class="line"><span class="keyword">return</span> (x &amp; y) | (~x &amp; z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8.isLessOrEqual</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> isLessOrEqual - <span class="keyword">if</span> x &lt;= y  then <span class="keyword">return</span> <span class="number">1</span>, <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line"> *   Example: <span class="built_in">isLessOrEqual</span>(<span class="number">4</span>,<span class="number">5</span>) = <span class="number">1.</span></span><br><span class="line"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line"> *   Max ops: <span class="number">24</span></span><br><span class="line"> *   Rating: <span class="number">3</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">isLessOrEqual</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个小于等于符号来判断两个数。当x&lt;=y时返回1，否则返回0。转化一下，满足条件y-x&gt;=0时就行。当x，y同号是我们直接向减判断，但是当x，y不同号时，我们需要考虑是否会溢出。</p><blockquote><p>   溢出：正-负=正+正。若超过最大正数范围则会正溢出，即正+正=负<br>              负-正。 若超过最小负数范围则会负溢出，即负+负=正</p></blockquote><p>所以需要分情况：<br>1.x，y符号位相同<br>                             2.x，y符号位不同</p><p>太难了。。。借鉴的大佬的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> signx=x&gt;&gt;<span class="number">31</span>;<span class="keyword">int</span> signy=y&gt;&gt;<span class="number">31</span>  <span class="comment">// 首先移位得到符号位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> samesign=（!(signx^signy));    <span class="comment">// 判断符号位，相同返回1，不同返回0；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> （samesign&amp;（（x+（~y）&gt;&gt;<span class="number">31</span>）| （！samesign）&amp;signx）</span><br></pre></td></tr></table></figure><p><strong>9.logicalNeg</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题意是当x不为0时，返回为0，当x为0时，返回为1；像区别正负和0的题我们要先找它的符号位：</p><p>首先当x不为0时，我们怎么变换将它转化为0?我们将x和x的相反数进行异或即（（～x+1）^x）再进行右移31位，x不为0时得到-1，x为0时我们得到0。最后加1就可以实现函数了。</p><p><strong>10.howManyBits</strong></p><p>这道题根本看不懂（＃－.－）参考的网上：</p><p>函数功能：判断x使用补码需要多少位来表示<br>思路：对于正数，需要寻找的是最后一个为１的位，对于负数，需要寻找的是最后一个为0的位，为了将正负数都统一为只需寻找最有一个为1的位对x进行以下处理x = (~sign &amp; x) | (sign &amp; ~x)，其中sign为x&gt;&gt;31。如果x为正数则，sign=0x0，如果x为负数,sign=0xffffffff。所以对于上面x的处理的意思为，如果x为正数，x保持不变，如果x为负数，对x进行按位取反。对于一个数要判断它的最后一个1在哪位，可以利用二分的思想处理。一个int类型的数32位，先对查找这个数的16-31位，如果存在则继续查找24-31位。如果这个数的16-31位不存在1，那么到8-15位去查找，以此类推。在实现中可以使用!操作快速地判断某一段中是否存在1，例如在判断16-31位时可以使用b16 = !!(x &gt;&gt; 16) &lt;&lt; 4来获取下次要移位的位数，如果存在1，那么下次要右移16位，对高16位进行判断，如果不存在，那么下次右移的位数为0,判断低16位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;undefined</span><br><span class="line"><span class="keyword">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">x = (~sign &amp; x) | (sign &amp; ~x); <span class="comment">// 如果x为正数保持原型，如果x为负数取反，使得非符号位最高位为1</span></span><br><span class="line"><span class="keyword">int</span> b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>; <span class="comment">// 如果大于16位，那么b16 = 16否则为0</span></span><br><span class="line">x &gt;&gt;= b16;</span><br><span class="line"><span class="keyword">int</span> b8 = !!(x &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">3</span>; <span class="comment">// 如果大于16位那么此时取的是16-23位,否则为0-7bit</span></span><br><span class="line">x &gt;&gt;= b8;</span><br><span class="line"><span class="keyword">int</span> b4 = !!(x &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">x &gt;&gt;= b4;</span><br><span class="line"><span class="keyword">int</span> b2 = !!(x &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>; <span class="comment">// 0-1</span></span><br><span class="line">x &gt;&gt;= b2;</span><br><span class="line"><span class="keyword">int</span> b1 = !!(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">x &gt;&gt;= b1;</span><br><span class="line"><span class="keyword">int</span> b0 = x;</span><br><span class="line"><span class="keyword">return</span> b16 + b8 + b4 + b2 + b1 + b0 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p><strong>1. floatScale2</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入函数uf并且返回2*uf，首先我们先看一下浮点数的分类：<br>                       情况                                   对应的数值<br>规格化的     (−1)s×2e−127×1.b22​b21​b20​……b3​b2​b1​b0​<br>非规格化的     (−1)s×2−126×0.b22​b21​b20​……b3​b2​b1​b0​<br>无穷大和无穷小     s=0：+ ∞   s=1：-∞<br>NaN     Not a number</p><p> 不同类型乘2格式是不一样的，所以我们需要分这四种来分别讨论：</p><p>我们定义exp来代表阶码，当uf为规格化时我们只需要exp加1就能实现uf。当uf为非规格化时我们只需要整体左移（这里还是不理解）。当uf为无穷大和无穷小或者NaN时返回它本身。</p><p>具体代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> flag = uf&gt;&gt;<span class="number">31</span>;<span class="comment">//logic right shift  flag_is_1_or_0</span></span><br><span class="line">  <span class="keyword">unsigned</span> exp = (uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0xff</span>;<span class="comment">//提取阶码 去除符号位</span></span><br><span class="line">  <span class="comment">//unsigned last_num = uf&amp;0x7fffff;//提取尾数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//规格化的 直接阶码加一再替换原来的阶码就好</span></span><br><span class="line">  <span class="keyword">int</span> res_exp = (exp  + <span class="number">1</span>)&lt;&lt;<span class="number">23</span>;</span><br><span class="line">  <span class="keyword">int</span> res = uf &amp; <span class="number">0x807fffff</span>;<span class="comment">//1000 0000 0111</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//无穷大和nan都返回自身</span></span><br><span class="line">  <span class="keyword">if</span>(exp == <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//非规格化的</span></span><br><span class="line">  <span class="keyword">if</span>(exp == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   </span><br><span class="line">    uf = uf &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    uf = uf | (flag&lt;&lt;<span class="number">31</span>);</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//规格化的 直接阶码加一再替换原来的阶码就好</span></span><br><span class="line">  <span class="keyword">return</span> res | res_exp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.floatFloat2Int</strong></p><p>函数功能：将uf转换为int类型<br>思路：获取指数域exp、符号位sign和尾数域frac。对于规格化数需要将frac的第24位置为1，所以frac = (uf &amp; 0x7fffff) | 0x00800000，获取指数域的十进制值exp = ((uf &amp; 0x7f800000) &gt;&gt; 23) - 127。将浮点数转换为整数的过程相当于将frac中隐藏的小数点右移exp位，同时将小数点后面的数值截断。如今小数点位于23位处，如果exp大于23，那么需要将frac左移exp-23位，如果exp小于23需要右移23-exp位把小数点截掉，最后将frac转换为补码表示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> * floatFloat2Int - Return bit-<span class="function">level equivalent of <span class="title">expression</span> <span class="params">(<span class="keyword">int</span>)</span> f</span></span><br><span class="line"><span class="function"> *   <span class="keyword">for</span> floating point argument f.</span></span><br><span class="line"><span class="function"> *   Argument is passed as <span class="keyword">unsigned</span> <span class="keyword">int</span>, but</span></span><br><span class="line"><span class="function"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="function"> *   single-precision floating point value.</span></span><br><span class="line"><span class="function"> *   Anything out of <span class="title">range</span> <span class="params">(including NaN <span class="keyword">and</span> infinity)</span> should <span class="keyword">return</span></span></span><br><span class="line"><span class="function"> *   0x80000000u.</span></span><br><span class="line"><span class="function"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="function"> *   Max ops: <span class="number">30</span></span></span><br><span class="line"><span class="function"> *   Rating: <span class="number">4</span></span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function">int floatFloat2Int(unsigned uf) &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> flag = uf&gt;&gt;<span class="number">31</span>;<span class="comment">//logic right shift  is_1_or_0</span></span><br><span class="line">  <span class="keyword">unsigned</span> exp = (uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0xff</span>;<span class="comment">//提取阶码 去除符号位</span></span><br><span class="line">  <span class="keyword">unsigned</span> last_num = uf&amp;<span class="number">0x7fffff</span>;<span class="comment">//提取尾数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//规格化的</span></span><br><span class="line">  <span class="keyword">int</span> real_exp = exp - <span class="number">127</span>;<span class="comment">//移码减去偏置 这里一定要是int型 不然没办法判断是否大于0 因为unsigned都大于等于0</span></span><br><span class="line">  <span class="keyword">unsigned</span> real_last_num = last_num | <span class="number">0x800000</span>;<span class="comment">//添上隐式的1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//无穷大和nan</span></span><br><span class="line">  <span class="keyword">if</span>(exp == <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//非规格化的</span></span><br><span class="line">  <span class="keyword">if</span>(exp == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//非常接近0的小数 直接舍弃小数变为0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//规格化的</span></span><br><span class="line">  <span class="keyword">if</span>(real_exp &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(real_exp&gt;=<span class="number">31</span>)<span class="comment">//overflow</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line">      </span><br><span class="line">    real_last_num = real_last_num &gt;&gt; (<span class="number">23</span> - real_exp);<span class="comment">//移码的意义 而且对于小数部分舍弃了</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="comment">//若是负数 还要转为补码形式</span></span><br><span class="line">      real_last_num= ~real_last_num+<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> real_last_num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//real_exp&lt;0 则说明是绝对值小于1的数 直接返回0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.floatPower2</strong></p><p> 传入x，返回2.0^x，以unsigned代替所要表示的float型。<br>提取符号位、阶码、尾数，再按上述的4类情况分类讨论，具体步骤在代码中的注释写得很清楚，搞清楚分界值到底该如何选取是关键</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">127</span>)<span class="comment">//overflow</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0x7f800000</span>;<span class="comment">//+inf 符号位0 阶码全1 尾数全0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//规格化的 [-126,127]</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">-126</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">unsigned</span> exp = x+<span class="number">127</span>;<span class="comment">//加上bias</span></span><br><span class="line">      <span class="keyword">return</span> exp&lt;&lt;<span class="number">23</span>;<span class="comment">//只需改变阶数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非规格化的 [-149,-127]</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">-149</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0x1</span>&lt;&lt;(x+<span class="number">149</span>);<span class="comment">//只需改变尾数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//x&lt;-149 too small to be represented</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>磕磕绊绊总算完成了，艰难但也收获很多。对一些基础知识更加的熟练。</p><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My blog</title>
      <link href="/2022/01/13/hello-world/"/>
      <url>/2022/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my blog </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
